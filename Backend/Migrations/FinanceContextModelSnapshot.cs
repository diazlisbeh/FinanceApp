// <auto-generated />
using System;
using Backend.BLL.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Backend.Migrations
{
    [DbContext(typeof(FinanceContext))]
    partial class FinanceContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Backend.DAL.Models.Budget", b =>
                {
                    b.Property<int>("BudgetID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("budgetId");

                    b.Property<float>("Amount")
                        .HasColumnType("float")
                        .HasColumnName("amount");

                    b.Property<int>("CategoryID")
                        .HasColumnType("int")
                        .HasColumnName("categoryID");

                    b.Property<DateTime>("Last_Update")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_update");

                    b.Property<int>("UserID")
                        .HasColumnType("int")
                        .HasColumnName("userId");

                    b.HasKey("BudgetID");

                    b.HasIndex("CategoryID");

                    b.HasIndex("UserID");

                    b.ToTable("budget", (string)null);
                });

            modelBuilder.Entity("Backend.DAL.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("categoryId");

                    b.Property<string>("Description")
                        .HasColumnType("longtext")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("categories", (string)null);
                });

            modelBuilder.Entity("Backend.DAL.Models.Transaction", b =>
                {
                    b.Property<Guid>("TransactionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("transactionId");

                    b.Property<float>("Amount")
                        .HasColumnType("float")
                        .HasColumnName("amount");

                    b.Property<int>("CategoryID")
                        .HasColumnType("int")
                        .HasColumnName("categoryID");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("date");

                    b.Property<string>("Porpuse")
                        .HasColumnType("longtext")
                        .HasColumnName("porpuse");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int")
                        .HasColumnName("userId");

                    b.HasKey("TransactionID");

                    b.HasIndex("CategoryID");

                    b.HasIndex("UserID");

                    b.ToTable("transaction", (string)null);
                });

            modelBuilder.Entity("Backend.DAL.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("userId");

                    b.Property<decimal>("Capital")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("capital");

                    b.Property<string>("Email")
                        .HasColumnType("longtext")
                        .HasColumnName("email");

                    b.Property<string>("LastName")
                        .HasColumnType("longtext")
                        .HasColumnName("lastName");

                    b.Property<string>("Name")
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.Property<byte[]>("Password")
                        .HasColumnType("longblob")
                        .HasColumnName("password");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("longblob")
                        .HasColumnName("passwordSalt");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("Backend.DAL.Models.Budget", b =>
                {
                    b.HasOne("Backend.DAL.Models.Category", "Category")
                        .WithMany("Budgets")
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Backend.DAL.Models.User", "User")
                        .WithMany("Budgets")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("Fk_budget_userid");

                    b.Navigation("Category");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Backend.DAL.Models.Transaction", b =>
                {
                    b.HasOne("Backend.DAL.Models.Category", "Category")
                        .WithMany("Movements")
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Backend.DAL.Models.User", "User")
                        .WithMany("Transactions")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Backend.DAL.Models.Category", b =>
                {
                    b.Navigation("Budgets");

                    b.Navigation("Movements");
                });

            modelBuilder.Entity("Backend.DAL.Models.User", b =>
                {
                    b.Navigation("Budgets");

                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
